name: "Terraform"

on:
  push:
    branches:
      - develop
      - release
      - hotfix
      - main
      - master
  pull_request:
    branches:
      - develop
    types: [opened, synchronize, labeled]
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

jobs:
  terraform-format:
    name: "Terraform Code Format Checks"
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ vars.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

  terrascan:
    name: "Terrascan"
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Run Terrascan
        id: terrascan
        uses: tenable/terrascan-action@main
        with:
          iac_dir: "."
          iac_type: "terraform"
          iac_version: "v14"
          policy_type: "aws"
          only_warn: true
          sarif_upload: true
          #scm_token: ${{ secrets.ACCESS_TOKEN }}
          #verbose: true
          #non_recursive:
          #policy_path:
          #skip_rules:
          #config_path:
          #find_vulnerabilities:
          #webhook_url:
          #webhook_token:

  checkov:
    name: "Checkov"
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Run Checkov action
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: "."
          quiet: true # optional: display only failed checks
          soft_fail: true # optional: do not return an error code if there are failed checks
          framework: terraform # optional: run only on a specific infrastructure {cloudformation,terraform,kubernetes,all}
          output_format: sarif # optional: the output format, one of: cli, json, junitxml, github_failed_only, or sarif. Default: sarif
          download_external_modules: true # optional: download external terraform modules from public git repositories and terraform registry
          log_level: DEBUG # optional: set log level. Default WARNING
          container_user: 1000 # optional: Define what UID and / or what GID to run the container under to prevent permission issues
          #file: example/tfplan.json # optional: provide the path for resource to be scanned. This will override the directory if both are provided.
          #check: CKV_AWS_1 # optional: run only a specific check_id. can be comma separated list
          #skip_check: CKV_AWS_2 # optional: skip a specific check_id. can be comma separated list
          #config_file: path/this_file
          #baseline: cloudformation/.checkov.baseline # optional: Path to a generated baseline file. Will only report results not in the baseline.

  docs:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: gitref
        run: |
          echo "github.ref: ${{ github.ref }}"
          echo "github.head_ref: ${{ github.head_ref }}"

      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Test terraform docs
        uses: terraform-docs/gh-actions@v1

  terraform-test:
    name: "Terraform Tests"
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ vars.TF_VERSION }}
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Workspace
        id: workspace
        run: terraform workspace new terraform-aws-vpcpeering-test

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Test
        id: test
        if: github.event_name == 'pull_request'
        run: terraform test

  notify:
    runs-on: ubuntu-latest
    needs: [terraform-format, terrascan, checkov, terraform-test, docs]
    if: always()

    steps:
      - name: Notify Slack
        uses: act10ns/slack@v2
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          channel: "#phoenix-builds"
        if: always()
